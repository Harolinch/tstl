const cp = require("child_process");
const fs = require("fs");
const mv = require("mv");
const rl = require("readline");

const TSCONFIG_DISABLES = ["declarationMap"];

function move(from, to)
{
    return new Promise((resolve, reject) =>
    {
        mv(from, to, error =>
        {
            if (error)
                reject(error);
            else
                resolve();
        });
    });
}

function scanf(question)
{
    return new Promise(resolve =>
    {
        let scanner = rl.createInterface
        ({
            input: process.stdin,
            output: process.stdout
        });
        scanner.question(question, input =>
        {
            resolve(input);
            scanner.close();
        });
    });
}

async function main(path = null)
{
    //----
    // PRE-PROCESSES
    //----
    // SPECIFY PATH
    while (!path)
    {
        path = await scanf("Insert path: ");
        if (fs.existsSync(path + "/..") === false)
            path = null;
    }

    // HIDE TEST DIRECTORY FOR A WHILE
    await move(__dirname + "/../src/test", __dirname + "/../build/test");

    // UPDATE TSCONFIG FOR A WHILE
    let config = fs.readFileSync(__dirname + "/../tsconfig.json", "utf8");
    let tempConfig = config;

    for (let elem of TSCONFIG_DISABLES)
    {
        let index = tempConfig.indexOf(`// "${elem}"`);
        if (index === -1)
            tempConfig = tempConfig.replace(`"${elem}"`, `// "${elem}"`);
    }
    fs.writeFileSync(__dirname + "/../tsconfig.json", tempConfig, "utf8");

    //----
    // GENERATE API DOCUMENTS
    //----
    // ALTHOUGH ERROR EXISTS, POST-PROCESSES MUST BE EXECUTED
    let error = null;

    // DO GENERATE
    try
    {
        let command = "typedoc src --plugin typedoc-plugin-external-module-name --out " + path;
        cp.execSync(command);
    }
    catch (e)
    {
        error = e;
    }

    //----
    // POST-PROCESSES
    //----
    // RESTORE TEST MODULES
    await move(__dirname + "/../build/test", __dirname + "/../src/test");

    // RESTORE TSCONFIG
    fs.writeFileSync(__dirname + "/../tsconfig.json", config, "utf8");

    // TRACE ERROR IF OCCURED
    if (error)
    {
        console.log(error);
        process.exit(-1);
    }
}
main(process.argv[2]);